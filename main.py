import os
import time
import json
import logging
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from telegram import Bot, InputMediaPhoto

from db import load_sent_ids, save_sent_id, ensure_table_exists

# Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
YOUR_TELEGRAM_BOT_TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]
YOUR_CHAT_ID = os.environ["TELEGRAM_CHAT_ID"]
bot = Bot(token=YOUR_TELEGRAM_BOT_TOKEN)

# OLX —Å—Å—ã–ª–∫–∏
OLX_URLS = [
    "https://www.olx.ua/uk/list/q-canon-ixus/?search%5Bfilter_float_price:to%5D=5000&search%5Bfilter_enum_digital_camera_manufacturers%5D%5B0%5D=2580",
    "https://www.olx.ua/uk/list/q-canon-elph/?search%5Border%5D=created_at:desc&search%5Bfilter_float_price:to%5D=5000&search%5Bfilter_enum_digital_camera_manufacturers%5D%5B0%5D=2580"
]

# –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏
PRIORITY_MODELS = ['135', '160', '175', '185', '190', '220']

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)

def get_all_images_from_ad(url, driver, retries=2):
    for attempt in range(retries):
        try:
            driver.set_page_load_timeout(60)
            driver.get(url)

            WebDriverWait(driver, 15).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, 'img[data-testid="swiper-image"]'))
            )

            soup = BeautifulSoup(driver.page_source, "html.parser")
            script_tag = soup.find("script", type="application/ld+json")

            if not script_tag:
                logging.warning(f"‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ JSON-LD —Å–∫—Ä–∏–ø—Ç –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ {url}")
                return []

            data = json.loads(script_tag.string)
            images = data.get("image", [])
            if isinstance(images, str):
                return [images]
            elif isinstance(images, list):
                return images
            else:
                return []
        except Exception as e:
            logging.error(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ JSON-LD: {e}")
            time.sleep(1)
    return []

def send_telegram_group(ad_id, title, price, date, url, photo_urls, priority=False):
    if priority:
        title = f"üî• –ü–†–Ü–û–†–ò–¢–ï–¢ | {title}"

    text = f"<b>{title}</b>\n–¶—ñ–Ω–∞: {price}\n–î–∞—Ç–∞: {date}\n\n<a href='{url}'>–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è</a>"

    try:
        if photo_urls:
            photo_urls = photo_urls[:10]
            if len(photo_urls) == 1:
                bot.send_photo(chat_id=YOUR_CHAT_ID, photo=photo_urls[0], caption=text, parse_mode="HTML")
            else:
                media = [InputMediaPhoto(media=img) for img in photo_urls]
                media[0].caption = text
                media[0].parse_mode = "HTML"
                bot.send_media_group(chat_id=YOUR_CHAT_ID, media=media)
        else:
            bot.send_message(chat_id=YOUR_CHAT_ID, text=text, parse_mode="HTML")

        logging.info(f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ: {title}")
        save_sent_id(ad_id)
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤ Telegram: {e}")

def is_priority(title):
    return any(model in title for model in PRIORITY_MODELS)

def main():
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É OLX...")

    ensure_table_exists()
    sent_ids = load_sent_ids()

    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:110.0) Gecko/20100101 Firefox/110.0")
    driver = webdriver.Chrome(options=chrome_options)

    try:
        while True:
            priority_ads = []
            other_ads = []

            for url in OLX_URLS:
                driver.get(url)
                try:
                    WebDriverWait(driver, 15).until(
                        EC.presence_of_all_elements_located((By.CSS_SELECTOR, 'div[data-cy="l-card"]'))
                    )
                except TimeoutException:
                    logging.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ {url}")
                    continue

                items = driver.find_elements(By.CSS_SELECTOR, 'div[data-cy="l-card"]')
                logging.info(f"üîç {url} ‚Äî –∑–Ω–∞–π–¥–µ–Ω–æ {len(items)} –æ–≥–æ–ª–æ—à–µ–Ω—å (–¥–æ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó)")

                filtered_count = 0
                for item in items:
                    try:
                        ad_id = item.get_attribute("id")
                        if not ad_id or ad_id in sent_ids:
                            continue

                        title_el = item.find_element(By.CSS_SELECTOR, 'div[data-cy="ad-card-title"] h4')
                        price_el = item.find_element(By.CSS_SELECTOR, 'p[data-testid="ad-price"]')
                        link_el = item.find_element(By.CSS_SELECTOR, 'a.css-rc5s2u, a.css-1tqlkj0')
                        location_date_el = item.find_element(By.CSS_SELECTOR, 'p[data-testid="location-date"]')

                        title = title_el.text.strip()
                        price = price_el.text.strip()
                        location_date = location_date_el.text.strip()
                        date = location_date.split(" - ")[-1].strip() if " - " in location_date else "–ù–µ–≤—ñ–¥–æ–º–æ"
                        link = link_el.get_attribute("href")
                        if link.startswith("/"):
                            link = "https://www.olx.ua" + link

                        if "ixus" in title.lower() or "elph" in title.lower():
                            ad_tuple = (ad_id, title, price, date, link)
                            if is_priority(title.lower()):
                                priority_ads.append(ad_tuple)
                            else:
                                other_ads.append(ad_tuple)
                            filtered_count += 1
                    except Exception as e:
                        logging.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ —Ä–æ–∑–±–æ—Ä—ñ –æ–¥–Ω–æ–≥–æ –∑ –æ–≥–æ–ª–æ—à–µ–Ω—å: {e}")

                logging.info(f"‚úÖ –ü—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∑–∞–ª–∏—à–∏–ª–æ—Å—å: {filtered_count} –æ–≥–æ–ª–æ—à–µ–Ω—å")

            for ad_list in [priority_ads, other_ads]:
                for ad_id, title, price, date, url in ad_list:
                    try:
                        photo_urls = get_all_images_from_ad(url, driver)
                        logging.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ: {len(photo_urls)} –¥–ª—è {title}")
                        send_telegram_group(ad_id, title, price, date, url, photo_urls,
                                            priority=(ad_list is priority_ads))
                        sent_ids.add(ad_id)
                    except Exception as e:
                        logging.error(f"‚ö†Ô∏è –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {e}")

            logging.info("‚åõ –ß–µ–∫–∞—î–º–æ 5 —Ö–≤–∏–ª–∏–Ω –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏...\n")
            time.sleep(300)

    except KeyboardInterrupt:
        logging.info("üõë –ó—É–ø–∏–Ω–∫–∞ –∑–∞ Ctrl+C. –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
        driver.quit()
    except Exception as e:
        logging.exception(f"‚ùó –ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        driver.quit()

if __name__ == "__main__":
    main()
